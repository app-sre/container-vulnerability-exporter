#!/usr/bin/python

# pip install openshift 

from kubernetes import client, config
from openshift.dynamic import DynamicClient

class Image:
  ref= ""
  host = ""
  org = ""
  name = ""
  uri = ""
  digest = ""
  hash = ""

  def __init__(self, imageid):
    self.imageidParse(imageid)
  
  def imageidParse(self, imageid):
    """
    examplein: docker-pullable://quay.io/app-sre/foo-image@sha256:87428fc522803d31065e7bce3cf03fe475096631e5e07bbd7a0fde60c4cf25c7
    example-out:
      name: foo-image
      uri: docker-pullable://quay.io/app-sre/foo-image
      host: quay.io
      digest: sha256
      hash: 87428fc522803d31065e7bce3cf03fe475096631e5e07bbd7a0fde60c4cf25c7
      ref: foo-image:sha256:87428fc522803d31065e7bce3cf03fe475096631e5e07bbd7a0fde60c4cf25c7
    """
    if imageid is None:
      raise SystemExit('Fatal: No imageID provided')
    self.uri = imageid.split('@')[0]
    self.name = self.uri.split('/')[-1]
    self.digest, self.hash = imageid.split('@')[-1].split(':')
    self.ref = ''.join([self.name,":",self.digest,":",self.hash])
    self.host = ''.join(imageid.split('/')[2])
    self.org = self.uri.split('/')[-2]

class CVEScan:
  ns = ""
  pods = ""
  def __init__(self, ns):
    self.ns = ns


k8s_client = config.new_client_from_config()
dyn_client = DynamicClient(k8s_client)
v1_pods = dyn_client.resources.get(api_version='v1', kind='Pod')
pod_list = v1_pods.get()

def getImages():
  for pod in pod_list.items:
    if pod.metadata.namespace in skipns:
      continue
#    print("ns: %s\n  pod: %s" % (pod.metadata.namespace, pod.metadata.name))
    for containerstatus in pod.status.containerStatuses:
      container = containerstatus.name
      image = Image(containerstatus.imageID)
      if image.host not in imageList:
        imageList[image.host] = {}
      if image.ref not in imageList[image.host]:
        imageList[image.host][image.ref] = image

"""
imageList is a dict of dict.
  first layer is a provider/host/location, ex: quay.io
  second layer is unique imageID data using name+digest+hash as a key
  ex: imageList["quay.io"]["foo-image:sha256:aabbcc1234"] --> an object of type Image
"""
imageList = {}
"""
skipns is a list of reserved namespaces
"""
skipns = [ "dedicated-admin", "dedicated-reader", "default", "kube-public", "kube-system", "management-infra", "openshift", "openshift-config", "openshift-console", "openshift-infra", "openshift-logging", "openshift-metrics-server", "openshift-monitoring", "openshift-node", "openshift-operator-lifecycle-manager", "openshift-operators", "openshift-sdn", "openshift-web-console", "ops-health-monitoring" ]

getImages()

print("Ignoring namespaces:\n  %s\n" % (skipns))
print("Images by source: ")
for ihost in imageList:
  print("  %s: %d" % (ihost,len(imageList[ihost])))
print

ihost="quay.io"
print("Unique images sourced from %s" % (ihost))
for iref in imageList[ihost]:
  print("  %s/%s/%s" % (ihost,imageList[ihost][iref].org,imageList[ihost][iref].name))
  print("    %s:%s" % (imageList[ihost][iref].digest,imageList[ihost][iref].hash))
print
