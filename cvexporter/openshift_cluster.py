import logging


from functools import lru_cache as lc
from kubernetes import config
from openshift.dynamic import DynamicClient
from openshift.dynamic.exceptions import NotFoundError


@lc(maxsize=512)
def log_missing_label(namespace, podname):
    return logging.info('No parent label for: '
                        'ns:{} pod/{}'.format(namespace, podname))


@lc()
def get_resources_by_kind(kind, api_version):
    k8s_client = config.new_client_from_config()
    dyn_client = DynamicClient(k8s_client)
    return dyn_client.resources.get(api_version=api_version, kind=kind)


def get_resources_by_name(kind, api_version, namespace=None, name=None):
    raw_resources = get_resources_by_kind(kind, api_version)
    try:
        return raw_resources.get(namespace=namespace, name=name)
    except NotFoundError:
        logging.error('Resource not found: kind={}, api={},'
                      ' ns={}, name={}'.format(kind,
                                               api_version,
                                               namespace,
                                               name))


def get_pods(namespace=None):
    return get_resources_by_name('Pod', 'v1', namespace, None)


def get_owner_ref(metadata):
    if metadata.get('ownerReferences'):
        logging.debug('GetOwner, metadata.ownerReferences: '
                      '{}'.format(metadata.get('ownerReferences')))
        return (metadata.ownerReferences[0].kind,
                metadata.ownerReferences[0].apiVersion,
                metadata.ownerReferences[0].name)
    logging.debug('No metadata.ownerReferences found.')
    return (None, None, None)


def get_saas_label(metadata):
    if metadata.get('labels'):
        logging.debug('GetLabel, metadata.labels: '
                      '{}'.format(str(metadata.get('labels'))))
        return (metadata.labels.get('saasherder.context'),
                metadata.labels.get('saasherder.service'))
    logging.debug('No metadata.labels found.')


def find_saas_labels(namespace, kind, api_version, name):
    logging.debug('GetByName: kind:{}, api_version:{}, namespace:{}, '
                  'name:{}'.format(kind,
                                   api_version,
                                   namespace,
                                   name))
    resource = get_resources_by_name(kind, api_version, namespace, name)
    if resource is None:
        return None
    labels = get_saas_label(resource.get('metadata'))
    if all(labels):
        logging.debug('get_saas_label.labels (true): {}'.format(str(labels)))
        return labels
    else:
        logging.debug('get_saas_label.labels (false): {}'.format(str(labels)))
    owner = get_owner_ref(resource.get('metadata'))
    if all(owner):
        logging.debug('get_saas_label.owner (true): {}'.format(str(owner)))
        return find_saas_labels(namespace, *owner)
    logging.debug('get_saas_label.owner (false): {}'.format(str(owner)))


def get_images(namespace_target=None, namespace_skip=None):
    container_images = []
    pod_list = get_pods(namespace_target)
    if pod_list is None:
        return container_images
    for pod in pod_list.items:
        namespace, podname = pod.metadata.namespace, pod.metadata.name
        if namespace_skip and namespace in namespace_skip:
            continue
        logging.debug('Start locating saas_labels for '
                      '{}, {}'.format(namespace, podname))
        saas_labels = find_saas_labels(namespace, 'Pod', 'v1', podname)
        if saas_labels is None:
            log_missing_label(namespace, podname)
            continue
        else:
            logging.debug('saas_labels are: {}'.format(str(saas_labels)))
        if pod.status.containerStatuses is None:
            pod_status = pod.status.conditions[0].status
            if pod_status.lower() == "false":
                continue
            else:
                raise("Something unexpected happened parsing " +
                      "(ns:{0}) pod/{1}".format(namespace, podname))
        else:
            containers = pod.status.containerStatuses
        for container in containers:
            if container.imageID is None:
                raise("Unable to decypher container image info for " +
                      "(ns:{0}) pod/{1}".format(namespace, podname))
            else:
                container_images.append((namespace, *saas_labels,
                                         container.name, container.imageID))
    return container_images
