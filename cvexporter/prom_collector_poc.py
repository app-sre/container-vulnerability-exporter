import time
import random


from functools import lru_cache as lc


from prometheus_client.core import REGISTRY, GaugeMetricFamily
from prometheus_client import start_http_server


class CustomCollector(object):
    def collect(self):
        g = GaugeMetricFamily('continer_vulnerabilities_total',
                              'Continer Vulnerability Totals by Severity',
                              labels=['namespace',
                                      'severity'])
        raw_data = make_a_metric()
        for ns, sev, val in raw_data:
            g.add_metric([ns, sev], val)
        yield g

# if i set two cache layers:  one for the main loop and one for prom, that
# should keep cache contention happy. i can control that from the main loop


def get_real_values():
    data = []
    data.append(('foons', 'high', random.randrange(1, 10)))
    data.append(('barns', 'low', random.randrange(1, 10)))
    print('---')
    print(data)
    return data


@lc()
def make_a_metric():
    return get_real_values()


if __name__ == '__main__':
    start_http_server(8000)
    REGISTRY.register(CustomCollector())
    while True:
        make_a_metric()
        time.sleep(10)
        make_a_metric.cache_clear()
