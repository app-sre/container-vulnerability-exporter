import time
import random


from functools import lru_cache as lc


from prometheus_client.core import REGISTRY, GaugeMetricFamily
from prometheus_client import start_http_server


class CustomCollector(object):
    def collect(self):
        g = GaugeMetricFamily('foo_total',
                              'Foo Totals by Severity',
                              labels=['namespace',
                                      'severity'])
        raw_data = prom_cache()
        for ns, sev, val in raw_data:
            g.add_metric([ns, sev], val)
        yield g


@lc()
def get_real_values():
    data = []
    for rn in range(1, random.randint(1, 10)):
        data.append(('foo'+str(rn), 'low', random.randint(1, 10)))
    print('---\n{}'.format(str(data)))
    return data


@lc()
def prom_cache():
    return get_real_values()


if __name__ == '__main__':
    start_http_server(8000)
    REGISTRY.register(CustomCollector())
    prom_cache()
    while True:
        get_real_values.cache_clear()
        get_real_values()
        prom_cache.cache_clear()
        prom_cache()
        time.sleep(10)
