import os
import requests
import logging
from functools import lru_cache as lc


QUAY_API = str(os.getenv("QUAY_API", "https://quay.io/api/v1/"))
QUAY_TOKEN = os.getenv("QUAY_TOKEN")
SEVERITIES = ('unknown',
              'negligible',
              'low',
              'medium',
              'high',
              'critical',
              'defcon1')


def is_scanned(vuln_data):
    return vuln_data.get('status') == "scanned"


def has_results(vuln_data):
    return vuln_data['data']['Layer'].get('Features') is None


def from_quay(imageurl):
    return imageurl.startswith('docker-pullable://quay.io')


def imageurl_parse(imageurl, item):
    try:
        image_uri_list = str(imageurl.split('@')[0]).split('/')
        image_name = str(''.join(image_uri_list[-1]))  # noqa: F841
        image_org = str(''.join(image_uri_list[-2]))  # noqa: F841
        image_host = str(''.join(image_uri_list[-3]))  # noqa: F841
        image_digesthash = str(imageurl.split('@')[-1])  # noqa: F841
    except ValueError:
        raise ValueError("Error parsing this image URL: {0}".format(imageurl))
    return eval('image_' + item)


def image_name(imageurl):
    return imageurl_parse(imageurl, 'name')


def image_org(imageurl):
    return imageurl_parse(imageurl, 'org')


def image_digesthash(imageurl):
    return imageurl_parse(imageurl, 'digesthash')


def image_digest(imageurl):
    return str(imageurl_parse(imageurl, 'digesthash').split(':')[0])


def image_hash(imageurl):
    return str(imageurl_parse(imageurl, 'digesthash').split(':')[1])


def image_host(imageurl):
    return imageurl_parse(imageurl, 'host')


def gen_secapi_url(imageurl, api_url=QUAY_API):
    return str("{0}repository/{1}/{2}/manifest/{3}/security".format(QUAY_API,
               image_org(imageurl),
               image_name(imageurl),
               image_digesthash(imageurl)))


@lc(maxsize=512)
def wget_vulnerabilities(url):
    upstream_service = 'Quay'
    method = 'GET'
    if os.getenv("QUAY_TOKEN"):
        headers = {'Authorization': 'Bearer {}'.format(QUAY_TOKEN)}
    else:
        headers = ''
    params = {'vulnerabilities': 'true'}
    try:
        resp = requests.request(method,
                                url,
                                headers=headers,
                                params=params)
        resp.raise_for_status()
    except requests.HTTPError as e:
        logging.error('Error from {}, try again later. '
                      '{}, "{}"'.format(upstream_service,
                                        str(requests.HTTPError(resp.text,
                                            response=e.response)),
                                        url))
        return None
    except requests.ConnectionError as e:
        logging.error('Unable to connect to {}, try again later.'
                      '{}, "{}'.format(upstream_service,
                                       str(e),
                                       url))
        return None
    except requests.exceptions.RequestException as e:
        logging.error('Error attempting to reach {}, try again later.'
                      '{}, "{}'.format(upstream_service,
                                       str(e),
                                       url))
        return None
    return resp


def parse_vulncounts(vuln_data):
    if is_scanned(vuln_data) is False or \
       has_results(vuln_data) is False:
        return None
    vulncounts = {}
    for severity in SEVERITIES:
        vulncounts[severity] = int(0)
    for package in vuln_data['data']['Layer']['Features']:
        if package.get('Vulnerabilities'):
            for entry in package['Vulnerabilities']:
                entry_sev = entry.get('Severity').lower()
                if entry_sev not in SEVERITIES:
                    logging.error(f'Quay is reporting an unexpected ' +
                                  'severity value here: {entry_sev}')
                else:
                    vulncounts[entry_sev] += 1
    return vulncounts


def get_vulnerabilities(imageurl):
    url = gen_secapi_url(imageurl, QUAY_API)
    api_response = wget_vulnerabilities(url)
    if api_response is None:
        return None
    try:
        quay_vuln_data = api_response.json()  # noqa: F841
    except ValueError:
        logging.error("Unable to parse Quay API response.")
        return None
    api_response.connection.close()
    return parse_vulncounts(quay_vuln_data)
