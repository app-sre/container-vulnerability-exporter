import os
import logging
import time

import prometheus_client as prom
import cvexporter.openshift_cluster as openshift_cluster
import cvexporter.quay_images as quay  # noqa: F401


DEFAULT_SKIP_NS = 'dedicated-admin, dedicated-reader, default,' \
                    'kube-public, kube-system, management-infra,' \
                    'openshift, openshift-config, openshift-console,' \
                    'openshift-infra, openshift-logging,' \
                    'openshift-metrics-server, openshift-monitoring,' \
                    'openshift-node, openshift-operator-lifecycle-manager,' \
                    'openshift-operators, openshift-sdn,' \
                    'openshift-web-console, ops-health-monitoring'


TARGET_NS = os.getenv('TARGET_NS')
SKIP_NS = DEFAULT_SKIP_NS
LISTEN_PORT = int(os.getenv('LISTEN_PORT') or 8080)
POLL_INTERVAL = int(os.getenv('POLL_INTERVAL') or 30)

LOG_LEVEL = str(os.getenv('LOG_LEVEL', 'INFO'))

if __name__ == '__main__':
    logging.basicConfig(format='%(levelname)s: %(message)s',
                        level=getattr(logging, LOG_LEVEL))
    prom.start_http_server(LISTEN_PORT)

    cvemetrics = prom.Gauge('container_vulnerabilities_total',
                            'Container Vulnerability Totals by Severity',
                            ['namespace',
                             'pod_name',
                             'container_name',
                             'severity'])
    while True:
        for ns, pod, container, imageurl in \
                openshift_cluster.get_images(TARGET_NS, SKIP_NS):
            if quay.from_quay(imageurl):
                vulnerabilities = quay.get_vulnerabilities(imageurl)
                if vulnerabilities is not None:
                    for sev in quay.severities():
                        cvemetrics.labels(namespace=ns,
                                          pod_name=pod,
                                          container_name=container,
                                          severity=sev
                                          ).set(vulnerabilities[sev])
            else:
                #  logging.info(f'(n:{ns}) {pod}/{container} is not sourced ' +
                #               ' from Quay.io')
                continue

        time.sleep(POLL_INTERVAL)
